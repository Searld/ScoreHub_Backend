// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScoreHub_Infrastructure;

#nullable disable

namespace ScoreHub_Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250725160330_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ScoreHub_Domain.Entities.AssistantData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCommandLesson")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.StudentData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TeacherDataId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherDataId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.TeacherData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.AssistantData", b =>
                {
                    b.HasOne("ScoreHub_Domain.Entities.Team", "Team")
                        .WithOne("Assistant")
                        .HasForeignKey("ScoreHub_Domain.Entities.AssistantData", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoreHub_Domain.Entities.User", "User")
                        .WithOne("AssistantData")
                        .HasForeignKey("ScoreHub_Domain.Entities.AssistantData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Lesson", b =>
                {
                    b.HasOne("ScoreHub_Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.StudentData", b =>
                {
                    b.HasOne("ScoreHub_Domain.Entities.Lesson", "Lesson")
                        .WithMany("Students")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScoreHub_Domain.Entities.Team", "Team")
                        .WithMany("Students")
                        .HasForeignKey("TeamId");

                    b.HasOne("ScoreHub_Domain.Entities.User", "User")
                        .WithOne("StudentData")
                        .HasForeignKey("ScoreHub_Domain.Entities.StudentData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");

                    b.Navigation("Team");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Subject", b =>
                {
                    b.HasOne("ScoreHub_Domain.Entities.TeacherData", null)
                        .WithMany("Subjects")
                        .HasForeignKey("TeacherDataId");

                    b.HasOne("ScoreHub_Domain.Entities.User", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.TeacherData", b =>
                {
                    b.HasOne("ScoreHub_Domain.Entities.User", "User")
                        .WithOne("TeacherData")
                        .HasForeignKey("ScoreHub_Domain.Entities.TeacherData", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Team", b =>
                {
                    b.HasOne("ScoreHub_Domain.Entities.Lesson", "Lesson")
                        .WithMany("Teams")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Lesson", b =>
                {
                    b.Navigation("Students");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Subject", b =>
                {
                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.TeacherData", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.Team", b =>
                {
                    b.Navigation("Assistant")
                        .IsRequired();

                    b.Navigation("Students");
                });

            modelBuilder.Entity("ScoreHub_Domain.Entities.User", b =>
                {
                    b.Navigation("AssistantData");

                    b.Navigation("StudentData");

                    b.Navigation("TeacherData");
                });
#pragma warning restore 612, 618
        }
    }
}
